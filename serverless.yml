# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: kevin
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: modelos-y-simulacion
# "service" is the name of this project. This will also be added to your AWS resource names.
service: modelos-y-simulacion

# CONFIGURACION DE AWS LA REGION Y EN QUE ENTORNO ESTA REALIZADO
provider:
  name: aws
  runtime: nodejs20.x
  region: sa-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - arn:aws:dynamodb:sa-east-1:588924165581:table/ch-users
            - arn:aws:dynamodb:sa-east-1:588924165581:table/ch-data-time
            - arn:aws:dynamodb:sa-east-1:588924165581:table/ch-courses
            - arn:aws:dynamodb:sa-east-1:588924165581:table/ch-groups

# CREACION DE LAS FUNCIONES LAMBDA
functions:
#### LOGIN #####
  login:
    handler: Back/src/login/login.handler
    name: login
    description: This function login a user.
    events:
      - httpApi:
          path: /login
          method: post

#### USER #####
  createUser:
    handler: Back/src/user/create.handler
    name: createUser
    description: This function creates a new user.
    events:
      - httpApi:
          path: /user/create
          method: post

  getUser:
    handler: Back/src/user/get.handler
    name: getUser
    description: This function obtain users.
    events:
      - httpApi:
          path: /user/obtain
          method: get

  deleteUser:
    handler: Back/src/user/deleteById.handler
    name: deleteUser
    description: This function delete a user.
    events:
      - httpApi:
          path: /user/delete/{id}
          method: delete

#### GROUP #####
  createGroup:
    handler: Back/src/courseGroup/group/createGroup.handler
    name: createGroup
    description: This function creates a new group.
    events:
      - httpApi:
          path: /group/create
          method: post

  getGroup:
    handler: Back/src/courseGroup/group/get.handler
    name: getGroup
    description: This function obtain a group.
    events:
      - httpApi:
          path: /group/obtain
          method: get

  deleteGroup:
    handler: Back/src/courseGroup/group/deleteGroupByName.handler
    name: deleteGroup
    description: This function delete a group.
    events:
      - httpApi:
          path: /group/delete/{name}
          method: delete

#### COURSE #####
  createCourse:
    handler: Back/src/courseGroup/course/createCourse.handler
    name: createCourse
    description: This function creates a new course.
    events:
      - httpApi:
          path: /course/create
          method: post

  getCourse:
    handler: Back/src/courseGroup/course/get.handler
    name: getGroup
    description: This function obtain a course.
    events:
      - httpApi:
          path: /course/obtain
          method: get

  deleteCourse:
    handler: Back/src/courseGroup/course/deleteCourseByName.handler
    name: deleteGroup
    description: This function delete a course.
    events:
      - httpApi:
          path: /course/delete/{name}
          method: delete

# CREACION DE TABLAS EN DYNAMODB
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ch-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: scope
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE

    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ch-courses
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: nameGroup
            AttributeType: S
          - AttributeName: teacher
            AttributeType: S
          - AttributeName: schedule
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    InfobipTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ch-groups
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ch-data-time
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: idUser
            AttributeType: S
          - AttributeName: nameActivity
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: idUser
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
